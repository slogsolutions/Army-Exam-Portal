# Generated by Django 4.2.7 on 2025-08-27 07:07

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Administrator'), ('evaluator', 'Evaluator'), ('candidate', 'Candidate'), ('center_admin', 'Center Administrator')], default='candidate', help_text='Type of user in the system', max_length=20)),
                ('phone_number', models.CharField(blank=True, help_text='User phone number', max_length=15)),
                ('is_center_admin', models.BooleanField(default=False, help_text='Whether this user is a center administrator')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address of last login', null=True)),
                ('login_attempts', models.PositiveIntegerField(default=0, help_text='Number of failed login attempts')),
                ('is_locked', models.BooleanField(default=False, help_text='Whether account is locked due to failed attempts')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Center',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the examination center', max_length=200, unique=True)),
                ('code', models.CharField(help_text='Unique code for the center', max_length=10, unique=True)),
                ('address', models.TextField(help_text='Full address of the center')),
                ('city', models.CharField(help_text='City where the center is located', max_length=100)),
                ('state', models.CharField(help_text='State where the center is located', max_length=100)),
                ('country', models.CharField(default='India', help_text='Country where the center is located', max_length=100)),
                ('contact_person', models.CharField(help_text='Name of the contact person', max_length=200)),
                ('contact_email', models.EmailField(help_text='Contact email address', max_length=254)),
                ('contact_phone', models.CharField(help_text='Contact phone number', max_length=15)),
                ('capacity', models.PositiveIntegerField(default=100, help_text='Maximum number of candidates the center can accommodate')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the center is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Center',
                'verbose_name_plural': 'Centers',
                'db_table': 'centers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('success', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Login Attempt',
                'verbose_name_plural': 'Login Attempts',
                'db_table': 'login_attempts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(help_text='Django session key', max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the session')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_sessions',
                'ordering': ['-login_time'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='center',
            field=models.ForeignKey(blank=True, help_text='Center this user belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='authentication.center'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
